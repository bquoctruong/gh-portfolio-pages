name: Build and Deploy to Cloud Run

on:

  workflow_run:
    workflows: [CodeQL]
    types:
      - completed
jobs:
  build:
        if: github.event.workflow_run.conclusion == 'success'
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Build Docker image
          run: |
            docker build -t ${{ vars.SERVICE }}:${{ github.sha }} ./

        - name: Save Docker image to tar file
          run: |
            docker save ${{ vars.SERVICE }}:${{ github.sha }} -o ${{ vars.SERVICE }}_${{ github.sha }}.tar

        - name: Upload image artifact
          uses: actions/upload-artifact@v4
          with:
            name: ${{ vars.SERVICE }}_${{ github.sha }}
            path: /tmp/${{ vars.SERVICE }}_${{ github.sha }}.tar
            retention-days: 1

        - name: Set output for artifact name
          id: set-output
          run: echo "::set-output name=artifact_name::${{ env.SERVICE }}_${{ github.sha }}"
            
        outputs:
          artifact_name: ${{ steps.set-output.outputs.artifact_name }}
          artifact_id: ${{ steps.artifact-upload-step.outputs.artifact-id }}
  load:
    needs: 
      [build]
    permissions:
      contents: 'read'
    runs-on: ubuntu-latest
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.SERVICE }}_${{ github.sha }}
          path: /tmp
    
      - name: Load Docker image from tar file
        id: load
        run: |
          docker load -i /tmp/${{ vars.SERVICE }}_${{ github.sha }}.tar
        #    docker build -t ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.SERVICE }}-0/${{ vars.SERVICE }}:${{ github.sha }} ./
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - id: 'access-secret'
        run: |-
          curl https://secretmanager.googleapis.com/v1/projects/my-project/secrets/my-secret/versions/1:access \
            --header "Authorization: Bearer ${{ steps.auth.outputs.access_token }}"

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'
      - name: Authenticate Docker with GCR
        run: |
          gcloud auth configure-docker ${{ vars.GAR_LOCATION }}-docker.pkg.dev --quiet
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io

      - name: Build and Push Container
        run: |-
          docker image tag ${{ vars.SERVICE }}:${{ github.sha }} ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.SERVICE }}-0/${{ vars.SERVICE }}:${{ github.sha }} ./
          docker push ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.SERVICE }}-0/${{ vars.SERVICE }}:${{ github.sha }}

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.SERVICE }}
          region: ${{ vars.REGION }}
          image: ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.SERVICE }}-0/${{ vars.SERVICE }}:${{ github.sha }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
