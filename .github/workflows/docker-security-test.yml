name: Docker Security Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Run workflow manually from the Actions tab
  workflow_dispatch:

# Add default permissions for all jobs
permissions:
  contents: read
  security-events: write
  
jobs:
  dockerfile-lint:
    runs-on: ubuntu-latest
    # Skip this job if the pull request is being closed without merging
    if: github.event_name != 'pull_request' || github.event.action != 'closed' || github.event.pull_request.merged == true
    # Add specific permissions for this job
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error
          format: sarif
          output-file: hadolint-results.sarif
          ignore: DL3018,DL3059
          
      - name: Upload hadolint results
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: hadolint-results.sarif
          wait-for-processing: true
          category: hadolint

  docker-build-test:
    runs-on: ubuntu-latest
    needs: dockerfile-lint
    # Skip this job if the pull request is being closed without merging
    if: github.event_name != 'pull_request' || github.event.action != 'closed' || github.event.pull_request.merged == true
    # Add specific permissions for this job
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Build with BuildKit security options
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: portfolio-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Enable BuildKit security features
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          # Remove build-contexts as it's causing issues
          provenance: false
          sbom: false
          outputs: type=docker

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'portfolio-app:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          timeout: '10m'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
          wait-for-processing: true
          category: trivy

  container-structure-test:
    runs-on: ubuntu-latest
    needs: docker-build-test
    # Skip this job if the pull request is being closed without merging
    if: github.event_name != 'pull_request' || github.event.action != 'closed' || github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create Container Structure Test file
        run: |
          cat > container-structure-test.yaml <<EOF
          schemaVersion: 2.0.0
          metadataTest:
            cmd: ["node", "--require", "./src/instrumentation.cjs", "src/index.js"]
            exposedPorts: ["80", "8080"]
            user: "node"
          fileExistenceTests:
            - name: 'Package.json exists'
              path: '/usr/src/app/package.json'
              shouldExist: true
          commandTests:
            - name: 'Node version'
              command: "node"
              args: ["--version"]
              expectedOutput: ["v18"]
            - name: 'Non-root user'
              command: "whoami"
              expectedOutput: ["node"]
          EOF

      - name: Build Docker image
        run: docker build -t portfolio-app:${{ github.sha }} ./

      - name: Install container-structure-test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test

      - name: Test Docker image structure
        run: container-structure-test test --image portfolio-app:${{ github.sha }} --config container-structure-test.yaml
        continue-on-error: true

  zap-scan:
    runs-on: ubuntu-latest
    needs: container-structure-test
    # Skip this job if the pull request is being closed without merging
    if: github.event_name != 'pull_request' || github.event.action != 'closed' || github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t portfolio-app:${{ github.sha }} ./
        continue-on-error: true

      - name: Create ZAP rules file
        run: |
          mkdir -p .zap
          cat > .zap/rules.tsv <<EOF
          10016	IGNORE	(Modern Web Application)
          10021	IGNORE	(X-Content-Type-Options Header Missing)
          10038	IGNORE	(Content Security Policy (CSP) Header Not Set)
          10049	IGNORE	(Non-Storable Content)
          10050	IGNORE	(Retrieved from Cache)
          10054	IGNORE	(Cookie without SameSite Attribute)
          10055	IGNORE	(CSP)
          10063	IGNORE	(Feature Policy Header Not Set)
          10096	IGNORE	(Timestamp Disclosure)
          10098	IGNORE	(Cross-Domain Misconfiguration)
          10109	IGNORE	(Modern Web Application)
          90027	IGNORE	(Cookie Slack Detector)
          EOF
          chmod -R 777 .zap

      - name: Create Docker network
        run: docker network create zap-network

      - name: Run Docker container
        run: |
          # Build and run with explicit environment variables
          docker run -d --name portfolio-container \
            --network zap-network \
            -p 80:80 \
            -p 8080:8080 \
            -e PORT=80 \
            -e HOST=0.0.0.0 \
            portfolio-app:${{ github.sha }}
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 15
          
          # Check container status
          echo "Container status:"
          docker ps -a
          
          # Check container logs
          echo "Container logs:"
          docker logs portfolio-container
          
          # Check container environment variables
          echo "Container environment variables:"
          docker exec portfolio-container env || echo "Could not get container environment"

      - name: Verify container is reachable
        run: |
          # Install curl and netcat for diagnostics
          sudo apt-get update && sudo apt-get install -y curl netcat-openbsd
          
          # Display container info
          echo "Container information:"
          docker inspect portfolio-container
          
          # Check both ports
          echo "Checking if port 80 is open on portfolio-container"
          nc -zv portfolio-container 80 || echo "Port 80 not reachable via container name"
          
          echo "Checking if port 80 is open on localhost"
          nc -zv localhost 80 || echo "Port 80 not reachable via localhost"
          
          echo "Checking if port 8080 is open on portfolio-container"
          nc -zv portfolio-container 8080 || echo "Port 8080 not reachable via container name"
          
          echo "Checking if port 8080 is open on localhost"
          nc -zv localhost 8080 || echo "Port 8080 not reachable via localhost"
          
          # Try curl to container with increased timeout and retries (port 80)
          echo "Trying to connect to container via http (port 80)"
          curl -v --max-time 30 --retry 10 --retry-delay 3 --retry-connrefused http://portfolio-container:80/ || echo "Container not reachable via port 80"
          
          # Try curl to localhost (port 80)
          echo "Trying to connect to localhost via http (port 80)"
          curl -v --max-time 30 --retry 10 --retry-delay 3 --retry-connrefused http://localhost:80/ || echo "Container not reachable via localhost port 80"
          
          # Check Docker networks
          echo "Docker networks:"
          docker network ls
          
          # Check Docker network details
          echo "Docker network details:"
          docker network inspect zap-network
          
          # Display running containers
          echo "Running containers:"
          docker ps -a

      - name: ZAP Baseline Scan
        id: zap-scan
        uses: zaproxy/action-baseline@v0.10.0
        continue-on-error: true
        with:
          target: 'http://portfolio-container:80'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          allow_issue_writing: false
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          docker_extra_params: '--network zap-network'
          
      - name: ZAP Baseline Scan (Fallback to localhost)
        if: steps.zap-scan.outcome == 'failure'
        uses: zaproxy/action-baseline@v0.10.0
        continue-on-error: true
        with:
          target: 'http://localhost:80'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          allow_issue_writing: false
          
      - name: Save ZAP logs
        if: always()
        run: |
          mkdir -p zap-logs
          docker logs $(docker ps -aqf "ancestor=ghcr.io/zaproxy/zaproxy:stable") > zap-logs/zap-docker.log 2>&1 || true
          
      - name: Upload ZAP logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-logs
          path: zap-logs/
          retention-days: 5

      - name: Stop Docker container
        if: always()
        run: |
          docker stop portfolio-container || true
          docker rm portfolio-container || true
          docker network rm zap-network || true 